<?php

namespace ProcessWire;

/**
 * CustomPageTypes module
 *
 * adds custom page types
 *
 */

class CustomPageTypes extends WireData implements Module
{
	// define all templates and their class names here
	private const templateClasses = array(
		'single_user' => 'MyUser'
	);

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo()
	{

		return array(

			// The module's title, typically a little more descriptive than the class name
			'title' => 'CustomPageTypes',

			// version number 
			'version' => 1,

			// summary is brief description of what this module is
			'summary' => 'adds custom page types',

			// singular=true: indicates that only one instance of the module is allowed.
			// This is usually what you want for modules that attach hooks. 
			'singular' => true,

			// autoload=true: indicates the module should be started with ProcessWire.
			// This is necessary for any modules that attach runtime hooks, otherwise those
			// hooks won't get attached unless some other code calls the module on it's own.
			// Note that autoload modules are almost always also 'singular' (seen above).
			'autoload' => true,

			// Optional font-awesome icon name, minus the 'fa-' part
			'icon' => 'smile-o',
		);
	}

	/**
	 * Initialize the module
	 *
	 * ProcessWire calls this when the module is loaded. For 'autoload' modules, this will be called
	 * when ProcessWire's API is ready. As a result, this is a good place to attach hooks. 
	 *
	 */
	public function init()
	{
		include_once(__DIR__ . '/PageClasses.php');
		$mus = new MyUsers();
		$this->wire('myusers', $mus, true);
		$this->assignPageClassNames();
	}

	/**
	 * assigns page class names to templates
	 * if $config->advanced = true, page class can be set in tab "System", field "Page Class Name"
	 */
	private function assignPageClassNames()
	{
		foreach(self::templateClasses as $tplName => $className) {
			$t = $this->wire()->templates->get($tplName);
			if($t->pageClass != $className) {
				$t->set('pageClass', $className);
				$t->save();
			}
		}
	}
}
